<?xml version="1.0" encoding="UTF-8"?>

<mule
	xmlns:module-logger="http://www.mulesoft.org/schema/mule/module-logger"
	xmlns:java="http://www.mulesoft.org/schema/mule/java"
	xmlns:http="http://www.mulesoft.org/schema/mule/http"
	xmlns:wsc="http://www.mulesoft.org/schema/mule/wsc"
	xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core"
	xmlns:os="http://www.mulesoft.org/schema/mule/os"
	xmlns:db="http://www.mulesoft.org/schema/mule/db"
	xmlns="http://www.mulesoft.org/schema/mule/core"
	xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="
http://www.mulesoft.org/schema/mule/db http://www.mulesoft.org/schema/mule/db/current/mule-db.xsd http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/os http://www.mulesoft.org/schema/mule/os/current/mule-os.xsd
http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd
http://www.mulesoft.org/schema/mule/wsc http://www.mulesoft.org/schema/mule/wsc/current/mule-wsc.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/java http://www.mulesoft.org/schema/mule/java/current/mule-java.xsd
http://www.mulesoft.org/schema/mule/module-logger http://www.mulesoft.org/schema/mule/module-logger/current/mule-module-logger.xsd">
	<sub-flow name="check-delivery-partners-for-duplicate-orders"
		doc:id="b05c5685-906e-4723-928c-2da321e788c7">
		<db:select doc:name="Select CartId"
			doc:id="42fcf4cb-5d25-4f1f-9ca0-819ffa79f74a" target="cartIdList"
			config-ref="Database_Config_Mule_Interface">
			<reconnect
				frequency="${secure::database.reconnect.frequency}"
				count="${secure::database.reconnect.count}" />
			<db:sql><![CDATA[SELECT distinct cart_id FROM [dbo].[validate_olo_duplicate_orders] with (Nolock) WHERE store_id = :storeId AND cart_id = :cartId
AND day_of_business = :currentDate AND delivery_partner_name in ('OLO', 'PayInStore','Online Orders')]]></db:sql>
			<db:input-parameters><![CDATA[#[{
	storeId: vars.storeId,
	cartId: vars.createCheckVars.cartId,
	currentDate: (now() >> "CST") as LocalDateTime as String {
		format: "yyyy-MM-dd HH:mm:ss.S"
	}
}]]]></db:input-parameters>
		</db:select>
		<choice doc:name="Check for duplicate olo orders"
			doc:id="beb515b2-f719-4fc7-816e-2c01e6c2d056">
			<when expression="#[!(isEmpty(vars.cartIdList))]">
				<db:select doc:name="Select Check Payload"
					doc:id="5dcfc175-6289-40b7-8ade-aaf33e12375f" target="checkPayload"
					config-ref="Database_Config_Mule_Interface">
					<reconnect
						frequency="${secure::database.reconnect.frequency}"
						count="${secure::database.reconnect.count}" />
					<db:sql><![CDATA[SELECT check_payload from [dbo].[olo_cart_id_details] with (Nolock) WHERE store_id =:storeId AND cart_id = :cartId]]></db:sql>
					<db:input-parameters><![CDATA[#[{
	storeId: vars.storeId,
	cartId: vars.createCheckVars.cartId
}]]]></db:input-parameters>
				</db:select>
				<choice doc:name="CheckPayload"
					doc:id="437b62e0-adc0-4b4c-8194-65313c8ea462">
					<when expression="#[!(isEmpty(vars.checkPayload))]">
						<set-payload
							value="#[vars.checkPayload[0].check_payload]"
							doc:name="Set Payload"
							doc:id="aa87ba9f-9ebd-4dc0-ab4c-5a87d1d7488c" />
						<module-logger:console-logging
							doc:name="Success" doc:id="e2add98e-7cc3-4ab0-ac46-b60c9df9bbf2"
							config-ref="TGIF_Logger_Config" traceId="#[correlationId]"
							stage="COMPLETED" apiName='#[p("secure::api.name")]'
							message="Process Completed" flowName="Create Check Flow"
							env='#[p("mule.env")]' startTime="#[vars.startTime]" />
					</when>
					<otherwise>
						<flow-ref doc:name="create-process-sub-flow"
							doc:id="be3a1828-6448-4f1d-85a0-b90e6580d945"
							name="create-process-sub-flow" />
					</otherwise>
				</choice>
			</when>
			<otherwise>
				<set-variable
					value="#[{
&#10;	storeId: if(vars.storeId != null) vars.storeId else vars.vrStoreId,
&#10;	cartId: vars.createCheckVars.cartId,
&#10;	orderId: vars.createCheckVars.authCode,
&#10;	dayofBusiness: (now() &gt;&gt; &quot;CST&quot;) as Date {
&#10;		format: &quot;MM/dd/yyyy&quot;
&#10;	},
&#10;	payload: 'NULL'
&#10;}]"
					doc:name="logData" doc:id="586bb1a4-d37a-4bb5-946e-462d877ac7e9"
					variableName="logData" />
				<flow-ref doc:name="insert-duplicate-orders"
					doc:id="3610c7cf-3538-4553-b65e-97872ba2a266"
					name="insert-duplicate-orders" />
				<flow-ref doc:name="create-process-sub-flow"
					doc:id="33632add-1ace-4b55-9d57-d5ebb319afaa"
					name="create-process-sub-flow" />
			</otherwise>
		</choice>
	</sub-flow>
	<sub-flow name="create-process-sub-flow"
		doc:id="1e2ae279-7aa2-4b27-996c-bd2f6d1c3d5b">
		<ee:transform doc:name="Post Transaction XML"
			doc:id="50bbe9a6-d123-4a7e-be7c-f29e81944d9b">
			<ee:message>
			</ee:message>
			<ee:variables>
				<ee:set-variable
					resource="dwl/create-check/pos-transaction-xml.dwl"
					variableName="postTransactionXML" />
			</ee:variables>
		</ee:transform>
		<set-variable
			value="#[output application/json
&#10;---
&#10;{
&#10;	methodName: 'CreateCheck - POS API Request',
&#10;	storeId: if ( vars.storeId != null ) vars.storeId else vars.vrStoreId,
&#10;	checkNumber: 'Null',
&#10;	checkSequence: 'Null',
&#10;	employeeNumber: 'Null',
&#10;	tableNumber: 'Null',
&#10;	status: '1',
&#10;	message: write(vars.postTransactionXML, &quot;applcation/xml&quot;, {writeDeclaration: false})
&#10;}]"
			doc:name="logData" doc:id="9f8e1fa9-a382-41d5-b644-40be1d39fedb"
			variableName="logData" />
		<flow-ref doc:name="insert-online-ordering-logs"
			doc:id="744dd878-4cf4-4e6f-8ff1-a713c0f72d18"
			name="insert-online-ordering-logs" />
		<flow-ref doc:name="get-store-ip-properties"
			doc:id="ae14da2f-e4f5-484f-bd63-a34d4548ca0e"
			name="get-store-ip-properties" />
		<choice doc:name="IP Address is not null"
			doc:id="6f6d160c-3f20-4a3d-b3c3-8badbe149ab2">
			<when expression="#[vars.storeIpProperties.serverIp != null]">
				<flow-ref doc:name="call-pos-api-create-check"
					doc:id="b0f44bc1-ad05-4617-8e93-889e23622ba1"
					name="call-pos-api-create-check" />

			</when>
			<otherwise>
				<set-variable
					value="#['Store Number ' ++ vars.storeId ++ ' not setup in mulesoft for online ordering']"
					doc:name="emailMessage"
					doc:id="c218e312-47b8-4bae-87c8-82bbe7a2f555"
					variableName="emailMessage" />
				<flow-ref doc:name="send-email-notification"
					doc:id="48b28b59-9bb8-4809-b029-878bf3ef4108"
					name="send-email-notification" />
				<set-variable
					value="#[output application/json
&#10;---
&#10;{
&#10;	methodName: 'CreateCheck - IP Addres is null',
&#10;	storeId: if ( vars.storeId != null ) vars.storeId else vars.vrStoreId,
&#10;	checkNumber: 'Null',
&#10;	checkSequence: 'Null',
&#10;	employeeNumber: 'Null',
&#10;	tableNumber: 'Null',
&#10;	status: '0',
&#10;	message: &quot;Store server not reachable, able to reach Firewall&quot;
&#10;}]"
					doc:name="logData" doc:id="4046e051-c0d9-401e-832d-367a2ab6264b"
					variableName="logData" />
				<flow-ref doc:name="insert-online-ordering-logs"
					doc:id="8f0db013-2ba9-4548-9df7-bf8489098da2"
					name="insert-online-ordering-logs" />
				<ee:transform doc:name="Create Failure Response"
					doc:id="ab2d42e5-9fe6-48c0-b0ed-b6e3f8a3b1e9">
					<ee:message>
						<ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{
	createcheck: {
		result: {
			status: "failure",
			message: "Store server not reachable, able to reach Firewall"
		}
	}
}]]></ee:set-payload>
					</ee:message>
					<ee:variables>
						<ee:set-variable
							variableName="deliveryOrderDetails"><![CDATA[%dw 2.0
output application/json
---
{
	deliveryPartnerName: vars.tenderId.messageSubject,
	storeId: vars.storeId,
	orderId: vars.createCheckVars.cartId,
	checkNumber: 'NULL',
	dayofBusiness: (now() >> "CST") as Date {
		format: "MM/dd/yyyy"
	},
	deliveryMethod: ' Pickup',
	status: 'failed',
	subTotal: if ( vars.initialPayload.createcheck.payment.subtotalNoDiscountsPlusTaxes == null or vars.initialPayload.createcheck.payment.taxTotal ==  null ) 'NULL'
	else (((vars.initialPayload.createcheck.payment.subtotalNoDiscountsPlusTaxes as Number) - (vars.initialPayload.createcheck.payment.taxTotal as Number)) as String),
	taxTotal: vars.initialPayload.createcheck.payment.taxTotal,
	agentId: vars.initialPayload.createcheck.agentId default ""
}]]></ee:set-variable>
					</ee:variables>
				</ee:transform>
				<flow-ref
					doc:name="insert-delivery-order-details-failed-order"
					doc:id="98e610b7-2a35-4c56-b763-edcbd9bcd274"
					name="insert-delivery-order-details-failed-order" />
				<module-logger:console-logging
					doc:name="Failed" doc:id="3ec350d9-a0f5-478f-8744-ee5050a781d0"
					config-ref="TGIF_Logger_Config" traceId="#[correlationId]"
					stage="COMPLETED" apiName='#[p("secure::api.name")]'
					message="IP Addess is null" flowName="Create Check Flow"
					env='#[p("mule.env")]' startTime="#[vars.startTime]" />
			</otherwise>
		</choice>
	</sub-flow>
	<sub-flow name="call-pos-api-create-check"
		doc:id="35273ee0-bf9f-4cc6-8db6-8ec4ef20b8c3">
		<module-logger:database-logging
			doc:name="POS API Request"
			doc:id="35b4b59d-1122-42c6-aed3-4255e8c0aaa0"
			config-ref="TGIF_Logger_Config" traceId="#[correlationId]"
			stage="IN PROCESS"
			message='#[output application/json --- write(vars.postTransactionXML, "application/xml", { writeDeclaration: false })]'
			flowStartDate="#[vars.startTime]" flowName="Create Check Flow"
			status="Before POS API Call" transactionType="ORDERS-MOBILEPOS"
			apiName='#[p("secure::api.name")]'
			apiVersion='#[p("secure::api.version")]' />
		<until-successful
			maxRetries="${secure::untilsuccessful.retries}" doc:name="Until Successful"
			doc:id="74c17757-0ee2-424b-bc67-b5b4d43bec7a"
			millisBetweenRetries="${secure::untilsuccessful.interval}">
			<http:request method="POST" doc:name="Request POS Api"
				doc:id="9fa4edef-5fb2-4177-9679-76587c8c8d44"
				target="createCheckServiceResponse"
				config-ref="HTTP_Request_configuration"
				path="/ResPosApiWeb/ResPosApiWeb.asmx">
				<reconnect
					frequency="${secure::posapi.reconnect.frequency}"
					count="${secure::posapi.reconnect.count}" />
				<http:body><![CDATA[#[%dw 2.0
output text/xml
---
vars.postTransactionXML]]]></http:body>
				<http:response-validator>
					<http:success-status-code-validator
						values="200..599" />
				</http:response-validator>
			</http:request>
		</until-successful>
		<module-logger:database-logging
			doc:name="POS API Request"
			doc:id="f2a06f82-ab22-4764-a814-bf59d24eadcd"
			config-ref="TGIF_Logger_Config" traceId="#[correlationId]"
			stage="IN PROCESS"
			message='#[output application/json --- write(vars.createCheckServiceResponse, "application/xml", { writeDeclaration: false })]'
			flowStartDate="#[vars.startTime]" flowName="Create Check Flow"
			status="After POS API Call" transactionType="ORDERS-MOBILEPOS"
			apiName='#[p("secure::api.name")]'
			apiVersion='#[p("secure::api.version")]' />
		<set-variable
			value="#[output application/json
&#10;---
&#10;{
&#10;	methodName: 'CreateCheck - POS API Response',
&#10;	storeId: if ( vars.storeId != null ) vars.storeId else vars.vrStoreId,
&#10;	checkNumber: 'Null',
&#10;	checkSequence: 'Null',
&#10;	employeeNumber: 'Null',
&#10;	tableNumber: 'Null',
&#10;	status: '1',
&#10;	message: write(vars.createCheckServiceResponse, &quot;application/xml&quot;, {writeDeclaration: false})
&#10;}]"
			doc:name="logData" doc:id="5ea4e457-3a29-4e3c-afa1-d71e5be6797c"
			variableName="logData" />
		<flow-ref doc:name="insert-online-ordering-logs"
			doc:id="e37a3a99-9be2-4da7-94b5-c8b019f8581f"
			name="insert-online-ordering-logs" />
		<ee:transform doc:name="Create Check Service Response"
			doc:id="8c2b1e09-2dd5-4384-b90c-1e8da97eb771">
			<ee:message>
			</ee:message>
			<ee:variables>
				<ee:set-variable
					variableName="createCheckServiceResponse"><![CDATA[%dw 2.0
output application/json
ns soapenv http://www.w3.org/2003/05/soap-envelope
---
if ( vars.createCheckServiceResponse.soapenv#Envelope.soapenv#Body.PostTransactionExResponse != null ) {
	status: "Success",
	response: vars.createCheckServiceResponse.soapenv#Envelope.soapenv#Body.PostTransactionExResponse
} else {
	status: "Failed",
	response: vars.createCheckServiceResponse.soapenv#Envelope.soapenv#Body.soapenv#Fault.detail.hresult replace "-" with ""
}
]]></ee:set-variable>
			</ee:variables>
		</ee:transform>
		<choice doc:name="Check Response"
			doc:id="f3080e2e-4f5a-4e52-8dc4-100c8ce8f2b2">
			<when
				expression="#[vars.createCheckServiceResponse.status == 'Success']">
				<logger level="INFO" doc:name="INFO: Success"
					doc:id="2b8e5f18-b474-40e1-8f3b-cdcff41af5df"
					message="POS API call was successfull" />
				<flow-ref doc:name="send-order-to-mail"
					doc:id="e8492c03-e28e-4955-91e4-ce1ba4689c53"
					name="send-order-to-mail" />
				<until-successful
					maxRetries="${secure::untilsuccessful.retries}" doc:name="Until Successful"
					doc:id="3f62d1aa-a4cc-45ad-9fb6-dda61fd6ef82"
					millisBetweenRetries="${secure::untilsuccessful.interval}">
					<wsc:consume doc:name="TGIF Web Service call"
						doc:id="f9a1aff4-9be1-4241-a5ee-e3d52b89a9ed"
						config-ref="Web_Service_Consumer_Config" operation="GetMicrosDOB"
						target="tgifServiceResponse">
						<wsc:message>
							<wsc:body><![CDATA[#[%dw 2.0
output application/xml
ns tem http://tempuri.org/
---
{
	tem#GetMicrosDOB: {
	}
}]]]></wsc:body>
						</wsc:message>
					</wsc:consume>
				</until-successful>
				<set-variable
					value="#[output application/json --- vars.tgifServiceResponse]"
					doc:name="tgifServiceResponse"
					doc:id="377fff35-3e13-4eeb-997b-06a08455f4a6"
					variableName="tgifServiceResponse" />
				<module-logger:database-logging
					doc:name="POS API Response"
					doc:id="385ff73e-9d21-4d4d-835a-c561db5ec282"
					config-ref="TGIF_Logger_Config" traceId="#[correlationId]"
					stage="IN PROCESS"
					message='#[output text/plain --- write(vars.tgifServiceResponse, "application/json")]'
					flowStartDate="#[vars.startTime]" flowName="Create Check Flow"
					status="After TGIF Web Service Call"
					transactionType="ORDERS-MOBILEPOS"
					apiName='#[p("secure::api.name")]'
					apiVersion='#[p("secure::api.version")]' />
				<set-variable
					value="#[%dw 2.0
&#10;output application/json
&#10;---
&#10;vars.tgifServiceResponse.body.GetMicrosDOBResponse.GetMicrosDOBResult]"
					doc:name="dayOfBusiness"
					doc:id="da06fa6e-77cf-4f45-a8f2-d124d1d95952"
					variableName="dayOfBusiness" />
				<ee:transform doc:name="Create Check JSON"
					doc:id="753445b9-e916-4f50-b0fb-54fc4452de97">
					<ee:message>
						<ee:set-payload
							resource="dwl/create-check/create-check.dwl" />
					</ee:message>
					<ee:variables>
					</ee:variables>
				</ee:transform>
				<set-variable
					value="#[output application/json&#10;---&#10;{&#10;	methodName: 'CreateCheck - Response',&#10;	storeId: if ( vars.storeId != null ) vars.storeId else vars.vrStoreId,&#10;	checkNumber: payload.createcheck.check.checkId,&#10;	checkSequence: payload.createcheck.check.checkSeq,&#10;	employeeNumber: payload.createcheck.check.employeeNumber,&#10;	tableNumber: payload.createcheck.check.tableNumber,&#10;	status: '1',&#10;	message: payload&#10;}]"
					doc:name="logData" doc:id="501687fc-4c6d-4bff-8caf-236325c19453"
					variableName="logData" />
				<flow-ref doc:name="insert-online-ordering-logs"
					doc:id="0b7bcbbe-ff9d-4725-b9b8-866e1957c3fa"
					name="insert-online-ordering-logs" />
				<choice doc:name="Check Delivery Partner"
					doc:id="d49fb98a-9cfd-4395-aaca-7a1f7b18a677">
					<when
						expression='#[using(subject = vars.tenderId.messageSubject) subject != "Grub Hub Delivery" and subject != "Uber Eats Delivery" and subject != "Postmates Delivery" and subject != "Door Dash Delivery"]'>
						<set-variable
							value="#[{&#10;&#10;	storeId: vars.storeId,&#10;&#10;	cartId: vars.createCheckVars.cartId,&#10;&#10;	payload: vars.createCheck,&#10;&#10;	dayofBusiness: payload.createcheck.dayOfBusiness&#10;&#10;}]"
							doc:name="Cart Log Data"
							doc:id="ed51ac30-1a59-4f9b-b5b2-2ea898ce2922"
							variableName="logData" />
						<flow-ref doc:name="insert-cart-id-logs"
							doc:id="a2e3a187-34bc-4297-827b-5490849d5e86"
							name="insert-cart-id-logs" />
						<set-variable
							value="#[%dw 2.0
&#10;output application/json
&#10;---
&#10;{
&#10;	deliveryPartnerName: vars.tenderId.messageSubject,
&#10;	storeId: vars.storeId,
&#10;	orderId: vars.createCheckVars.cartId,
&#10;	checkNumber: payload.createcheck.check.checkId,
&#10;	dayofBusiness: payload.createcheck.dayOfBusiness,
&#10;	deliveryMethod: ' Pickup',
&#10;	status: 'success',
&#10;	subTotal: if ( vars.initialPayload.createcheck.payment.subtotalNoDiscountsPlusTaxes == null or vars.initialPayload.createcheck.payment.taxTotal ==  null ) 'NULL'&#10;&#10;	else (((vars.initialPayload.createcheck.payment.subtotalNoDiscountsPlusTaxes as Number) - (vars.initialPayload.createcheck.payment.taxTotal as Number)) as String),
&#10;	taxTotal: vars.initialPayload.createcheck.payment.taxTotal,
&#10;	agentId: vars.initialPayload.createcheck.agentId default &quot;&quot;
&#10;}]"
							doc:name="Delivery Order Log Data"
							doc:id="17154e44-d1ce-4900-920a-5d8a6f28a34a"
							variableName="deliveryOrderDetails" />
						<flow-ref doc:name="insert-delivery-order-details"
							doc:id="ff9a41bc-1411-448e-8ab7-45ed3e41221b"
							name="insert-delivery-order-details" />
					</when>
					<otherwise>
						<logger level="INFO" doc:name="INFO: Logger"
							doc:id="f66466eb-8842-4b2f-9c52-948381885ce5"
							message="Grub Hub delivery or Doordash delivery or UberEats delivery or Postmates delivery" />
					</otherwise>
				</choice>
				<module-logger:console-logging
					doc:name="Success" doc:id="eedb4d2b-61de-47e0-8df1-4dcea6e18115"
					config-ref="TGIF_Logger_Config" traceId="#[correlationId]"
					stage="COMPLETED" apiName='#[p("secure::api.name")]'
					message="Process Completed" flowName="Create Check Flow"
					env='#[p("mule.env")]' startTime="#[vars.startTime]" />
			</when>
			<otherwise>
				<set-variable
					value="#[vars.createCheckServiceResponse.response]"
					doc:name="errorCode" doc:id="3db98083-6e17-4a75-a250-bd60e4434406"
					variableName="errorCode" />
				<flow-ref doc:name="get-error-code-details"
					doc:id="292f7a99-1c92-408a-96ca-f819782c8a2d"
					name="get-error-code-details" />
				<ee:transform doc:name="Create Failure Response"
					doc:id="5d878d2f-6310-48a3-bcbd-4c1242e84f31">
					<ee:message>
						<ee:set-payload
							resource="dwl/create-check/failure-payload.dwl" />
					</ee:message>
					<ee:variables>
						<ee:set-variable variableName="logData"><![CDATA[%dw 2.0
output application/json
---
{
	methodName: 'CreateCheck - POS API Call failed',
	storeId: if ( vars.storeId != null ) vars.storeId else vars.vrStoreId,
	checkNumber: 'Null',
	checkSequence: 'Null',
	employeeNumber: 'Null',
	tableNumber: 'Null',
	status: '0',
	message: if ( vars.errorCode == "Bad response" ) "Unable to find check Bad Response returned from micros" else vars.errorDescription
}]]></ee:set-variable>
					</ee:variables>
				</ee:transform>
				<flow-ref doc:name="insert-online-ordering-logs"
					doc:id="1d1b74e6-d8c5-45d9-afd9-1c00afa90412"
					name="insert-online-ordering-logs" />
				<flow-ref
					doc:name="insert-delivery-order-details-failed-order"
					doc:id="924a8993-0874-4054-a690-864ae9b6736c"
					name="insert-delivery-order-details-failed-order" />
				<module-logger:console-logging
					doc:name="Failed" doc:id="aef356b9-e8d3-4a62-8117-2bf9b5836ce5"
					config-ref="TGIF_Logger_Config" traceId="#[correlationId]"
					stage="COMPLETED" apiName='#[p("secure::api.name")]'
					message="POS API call failed" flowName="Create Check Flow"
					env='#[p("mule.env")]' startTime="#[vars.startTime]" />

			</otherwise>
		</choice>
	</sub-flow>
	<sub-flow name="send-order-to-mail"
		doc:id="75b17d5b-cc56-4bbe-87f2-16ba970ff8cd">
		<logger level="INFO"
			doc:name="INFO: Called send order to email flow"
			doc:id="b2379ba5-e6d2-469e-a017-194eea64078d"
			message="Called send order to email flow" />
		<ee:transform doc:name="Stripes Code"
			doc:id="c53e0e1f-cdc0-4a29-bead-23cceee403ea">
			<ee:message>
			</ee:message>
			<ee:variables>
				<ee:set-variable variableName="stripesCode"><![CDATA[%dw 2.0
output application/json
import java!com::api::tgif::mobilepos::util::CommonUtil
fun getMonth(date) = ((date splitBy " ")[0] replace "'" with "-") as Date {format: "MMMdd-yy"} as String {format: "M"} as Number
fun getDay(date) = ((date splitBy " ")[0] replace "'" with "-") as Date {format: "MMMdd-yy"} as String {format: "d"} as Number
fun getChkNumber(chkDetail) = (chkDetail splitBy " ")[1] as Number
fun getArgs() = {
    month: getMonth(trim((vars.createCheckServiceResponse.response.ppCheckPrintLines.*string)[10])),
    day: getDay(trim((vars.createCheckServiceResponse.response.ppCheckPrintLines.*string)[10])),
    checkNumber: getChkNumber(trim((vars.createCheckServiceResponse.response.ppCheckPrintLines.*string )[9])) 
}
---
CommonUtil::StripesCode(vars.storeId as Number, vars.createCheckServiceResponse.response.pTotalsResponse.TotalsSubTotal as Number, getArgs().month,getArgs().day,getArgs().checkNumber)
]]></ee:set-variable>
			</ee:variables>
		</ee:transform>
		<async doc:name="Async"
			doc:id="08f77de5-76c8-4a3e-97bd-d622d587bb6d">
			<choice doc:name="Check Email Message"
				doc:id="ce22d4e6-ff91-47de-a122-916d8e0e6343">
				<when
					expression='#[vars.emailMessage != "Print Check Lines not found"]'>
					<ee:transform doc:name="Set Email Message"
						doc:id="d6a42f53-8e89-4c2f-afe4-25fc145b50f6">
						<ee:message>
						</ee:message>
						<ee:variables>
							<ee:set-variable
								resource="dwl/create-check/email-message.dwl"
								variableName="emailMessage" />
						</ee:variables>
					</ee:transform>
					<flow-ref doc:name="send-create-email-notification"
						doc:id="69cdc0c1-6b90-4042-a983-97f5e879becb"
						name="send-create-email-notification" />
					<logger level="INFO" doc:name="INFO: Logger"
						doc:id="115eb29a-50e2-4584-91b9-18d761393e42"
						message="Email Online Order Check Lines to store Method Completed" />
					<set-variable
						value="#[output application/json&#10;---&#10;{&#10;	methodName: 'CreateCheck - SendOrdertoEmail',&#10;	storeId: if ( vars.storeId != null ) vars.storeId else vars.vrStoreId,&#10;	checkNumber: 'Null',&#10;	checkSequence: 'Null',&#10;	employeeNumber: 'Null',&#10;	tableNumber: 'Null',&#10;	status: '1',&#10;	message: vars.emailMessage&#10;}]"
						doc:name="logData" doc:id="d8b12544-fd38-461a-a21a-a3982dd8d164"
						variableName="logData" />
					<flow-ref doc:name="insert-online-ordering-logs"
						doc:id="419ff3e6-58c4-4b3a-9d49-fe2ad2138fb9"
						name="insert-online-ordering-logs" />
				</when>
				<otherwise>
					<set-variable
						value="#[if(vars.emailMessage == &quot;Print Check Lines not found&quot;) &quot;No print check lines received from micros for store &quot; ++ vars.storeId ++ &quot; in CreateCheck method&quot;
&#10;else 'Error occurred while reading Print Check Lines for store ' + vars.storeId ++ &quot; in CreateCheck method. Error message : Exception in Print Check Lines&quot;]"
						doc:name="emailMessage"
						doc:id="026a1fbc-73a0-4962-8a4e-0044dad162be"
						variableName="emailMessage" />
					<flow-ref doc:name="send-email-notification"
						doc:id="d8ac5fa2-c70b-406f-87d1-6a34cef65b5d"
						name="send-email-notification" />
					<logger level="INFO" doc:name="INFO: Logger"
						doc:id="5c5d5a2a-cdd6-45a3-bdc8-4957f6838b56"
						message="Read Print Check Lines Method Completed with Errors" />
					<set-variable
						value="#[output application/json
&#10;---
&#10;{
&#10;	methodName: 'CreateCheck - SendOrdertoEmail',
&#10;	storeId: if ( vars.storeId != null ) vars.storeId else vars.vrStoreId,
&#10;	checkNumber: 'Null',
&#10;	checkSequence: 'Null',
&#10;	employeeNumber: 'Null',
&#10;	tableNumber: 'Null',
&#10;	status: '0',
&#10;	message: vars.emailMessage
&#10;}]"
						doc:name="logData" doc:id="67298980-ed1d-4cc3-842c-9970212fb860"
						variableName="logData" />
					<flow-ref doc:name="insert-online-ordering-logs"
						doc:id="a90ee520-7ddb-49dc-90bc-ea1c30ed4b5a"
						name="insert-online-ordering-logs" />
				</otherwise>
			</choice>
		</async>
	</sub-flow>
	<sub-flow name="get-delivery-partner-orders"
		doc:id="15728ae5-7d4a-4169-a607-f7d052bbd35b">
		<logger level="INFO" doc:name="INFO: Start"
			doc:id="de214dd4-328b-492c-a62a-bcb118ce41ec"
			message="Enter Get Delivery Partner order from Object Store flow" />
		<ee:transform doc:name="Delivery Partner"
			doc:id="af2ba628-f84f-4976-8cdd-16f87f99e244">
			<ee:message>
			</ee:message>
			<ee:variables>
				<ee:set-variable variableName="retrieveKey"><![CDATA[%dw 2.0
output application/json
---
if(vars.paymentCardType == "UBE") "uberEatsOrderType"
else if(vars.paymentCardType == "DD") "doorDashOrderType"
else if(vars.paymentCardType == "GH") "grubHubOrderType"
else if(vars.paymentCardType == "PM") "postmatesOrderType"
else ""]]></ee:set-variable>
				<ee:set-variable variableName="deliveryPartner"><![CDATA[%dw 2.0
output application/json
---
if(vars.paymentCardType == "UBE") "UberEats"
else if(vars.paymentCardType == "DD") "DoorDash"
else if(vars.paymentCardType == "GH") "GrubHub"
else if(vars.paymentCardType == "PM") "Postmates"
else ""]]></ee:set-variable>
			</ee:variables>
		</ee:transform>
		<choice doc:name="Choice" doc:id="596370e0-8477-416d-bb96-705b292b3a77" >
			<when expression='#[vars.retrieveKey != ""]'>
				<os:retrieve doc:name="Retrieve Delivery Partner Orders" doc:id="d7291d14-abbc-45cf-afc0-c6c5d20cac07" key="#[vars.retrieveKey]" objectStore="Object_store" target="orderType" />
				<set-variable value="#[output application/json --- ((vars.orderType.resultSet1 filter ($.store_id as String == vars.storeId)).order_type_id)[0]]" doc:name="orderType" doc:id="8742b20d-326b-4960-9851-0f4bcb2a1c28" variableName="orderType" />
			</when>
			<otherwise >
				<set-variable value='#[""]' doc:name="Set Variable" doc:id="9c7a4693-d8ed-46a1-b26c-037bc3553e44" variableName="orderType"/>
			</otherwise>
		</choice>
		<logger level="INFO" doc:name="INFO: Exit"
			doc:id="8a9de6d3-bff9-4876-9351-959f029e2759"
			message="Exit Get Delivery Partner order from Object Store flow" />
	</sub-flow>
	<sub-flow name="get-tender-media-details"
		doc:id="7b1214fa-07dc-49ea-81e2-5896fad52029">
		<logger level="INFO" doc:name="INFO: Enter"
			doc:id="0dc9acae-7568-4c3a-a0e3-f0783b1136e2"
			message="Enter Get Tender details from Object Store" />
		<os:retrieve doc:name="Retrieve Tender Media Details"
			doc:id="507a6e87-0240-4344-8496-ec46c5a4297f" key="tenderMedia"
			objectStore="Object_store" target="tenderMedia" />
		<set-variable
			value="#[output application/json --- ((vars.tenderMedia.resultSet1 filter ($.store_id as String == vars.storeId)).tender_media_object_number)[0]]"
			doc:name="tenderMedia" doc:id="62bfb746-3988-4842-9d04-40cb10720289"
			variableName="tenderMedia" />
		<logger level="INFO" doc:name="INFO: Exit"
			doc:id="35defe16-3907-4c9f-963f-b50c2e5b09d2"
			message="Exit Get Tender details from Object Store" />
	</sub-flow>
	<sub-flow name="insert-delivery-order-details-failed-order"
		doc:id="fd0f193a-ebbe-4014-8451-26ebdfff3348">
		<choice doc:name="Check Delivery Partner"
			doc:id="00f1ec78-7ffa-4fca-b0ac-12f9c389a8a0">
			<when
				expression='#[vars.tenderId.messageSubject != "Grub Hub Delivery" and vars.tenderId.messageSubject != "Uber Eats Delivery" and vars.tenderId.messageSubject != "Postmates Delivery" and vars.tenderId.messageSubject != "Door Dash Delivery"]'>
				<ee:transform doc:name="Delivery Order Details"
					doc:id="21a88eaa-478b-4a31-8577-241e91efaabc">
					<ee:message>
					</ee:message>
					<ee:variables>
						<ee:set-variable
							variableName="deliveryOrderDetails"><![CDATA[%dw 2.0
output application/json
---
{
	deliveryPartnerName: vars.tenderId.messageSubject,
	storeId: vars.storeId,
	orderId: vars.createCheckVars.cartId,
	checkNumber: 'NULL',
	dayofBusiness: (now() >> "CST") as Date {
		format: "MM/dd/yyyy"
	},
	deliveryMethod: ' Pickup',
	status: 'failed',
	subTotal: using(payment = vars.initialPayload.createcheck.payment)if ( payment.subtotalNoDiscountsPlusTaxes == null or payment.taxTotal ==  null ) 'NULL'
	else (((payment.subtotalNoDiscountsPlusTaxes as Number) - (payment.taxTotal as Number)) as String),
	taxTotal: vars.initialPayload.createcheck.payment.taxTotal,
	agentId: vars.initialPayload.createcheck.agentId default ""
}]]></ee:set-variable>
					</ee:variables>
				</ee:transform>
				<flow-ref doc:name="insert-delivery-order-details"
					doc:id="cc785245-55e1-4751-af8f-9dde3ccc7df4"
					name="insert-delivery-order-details" />
			</when>
			<otherwise>
				<logger level="INFO" doc:name="INFO: Logger"
					doc:id="5ad7e231-5b1d-4703-a8ef-17cd89af2091"
					message="Grub Hub delivery or Doordash delivery or UberEats delivery or Postmates delivery" />
			</otherwise>
		</choice>
	</sub-flow>
	<sub-flow name="get-vr-details"
		doc:id="ee5ec963-faf0-414e-9018-2bfd181773bd">
		<choice doc:name="Check BrandId"
			doc:id="172602ed-db4b-4919-bb0d-1683ca77f168">
			<when expression='#[vars.brandId != 1]'>
				<os:retrieve doc:name="Retrieve VR Details"
					doc:id="f87b6049-93d4-46a6-8ac4-6a2bfec94c23" key="vrDetails"
					objectStore="Object_store" target="vrDetails" />
				<ee:transform doc:name="Transform Message"
					doc:id="43b5806b-feb3-448b-9317-b15927ef596e">
					<ee:message>
					</ee:message>
					<ee:variables>
						<ee:set-variable variableName="vrStoreId"><![CDATA[%dw 2.0
output application/json
---
((vars.vrDetails.resultSet1 filter ( ($.store_id as String == vars.storeId as String) and ($.delivery_partner_name as String== vars.deliveryPartner as String) and ($.brand_id as String == vars.brandId as String) )).vr_store_id)[0] default "NULL"]]></ee:set-variable>
						<ee:set-variable variableName="brandName"><![CDATA[%dw 2.0
output application/java
---
((vars.vrDetails.resultSet1 filter (($.store_id as String == vars.storeId as String) and ($.delivery_partner_name as String== vars.deliveryPartner as String) and ($.brand_id as String == vars.brandId as String))).brand_name)[0] default ""]]></ee:set-variable>
						<ee:set-variable variableName="orderType"><![CDATA[%dw 2.0
output application/json
---
((vars.vrDetails.resultSet1 filter ( ($.store_id as String == vars.storeId as String) and ($.delivery_partner_name as String== vars.deliveryPartner as String) and ($.brand_id as String == vars.brandId as String) )).order_type_id)[0] default ""]]></ee:set-variable>
						<ee:set-variable
							variableName="employeeObjectNumber"><![CDATA[%dw 2.0
output application/json
---
((vars.vrDetails.resultSet1 filter ( ($.store_id as String == vars.storeId as String) and ($.delivery_partner_name as String== vars.deliveryPartner as String) and ($.brand_id as String == vars.brandId as String) )).employee_object_number)[0] default ""]]></ee:set-variable>
					</ee:variables>
				</ee:transform>
			</when>
			<otherwise>
				<logger level="INFO" doc:name="INFO: Default"
					doc:id="78ec1b7d-2d4d-40da-bf3b-53b1fcc12311"
					message="Its a Fridays Store" />
			</otherwise>
		</choice>
	</sub-flow>

	<sub-flow name="insert-duplicate-orders"
		doc:id="2e4a93df-ea30-4df5-bc02-c25701e92a61">
		<set-variable
			value='#[if(vars.tenderId.messageSubject != "Online Orders") "PayInStore" else "OLO"]'
			doc:name="deliveryPartner"
			doc:id="ca9a7114-1b28-4c3b-8cc6-c0bb9471c395"
			variableName="deliveryPartner" />
		<db:stored-procedure
			doc:name="Call prc_validate_olo_duplicate_orders_insert"
			doc:id="940a2703-243a-401c-a486-1c18c3b9c9a6"
			config-ref="Database_Config_Mule_Interface" target="dupOrdersResult">
			<reconnect
				frequency="${secure::database.reconnect.frequency}"
				count="${secure::database.reconnect.count}" />
			<db:sql><![CDATA[{ call dbo.prc_validate_olo_duplicate_orders_insert(:store_id,:cart_id,:order_id,:day_of_business,:delivery_partner_name)}]]></db:sql>
			<db:input-parameters><![CDATA[#[{
	store_id: vars.logData.storeId,
	cart_id: vars.logData.cartId,
	order_id: vars.logData.orderId,
	day_of_business: vars.logData.dayOfBusiness,
	delivery_partner_name: vars.deliveryPartner
}]]]></db:input-parameters>
		</db:stored-procedure>
	</sub-flow>
	<sub-flow name="insert-delivery-order-details"
		doc:id="4e584271-571b-4a8e-a5b4-db07e0572366">
		<async doc:name="Async"
			doc:id="d5228358-0df0-47d8-a6cd-420a0005c603">
			<db:stored-procedure
				doc:name="Insert Delivery Order Details"
				doc:id="aea8f562-a88a-44a8-a791-d4a65831249f"
				config-ref="Database_Config_Mule_Interface">
				<reconnect
					frequency="${secure::database.reconnect.frequency}"
					count="${secure::database.reconnect.count}" />
				<db:sql><![CDATA[{ call dbo.prc_delivery_order_details_insert(:delivery_partner_name,:store_id,:order_id,:check_number,:day_of_business,:delivery_method,:status,:sub_total,:tax_total,:agent_id)}]]></db:sql>
				<db:input-parameters><![CDATA[#[{
	delivery_partner_name: vars.deliveryOrderDetails.deliveryPartnerName,
	store_id: vars.deliveryOrderDetails.storeId,
	order_id: vars.deliveryOrderDetails.orderId,
	check_number: vars.deliveryOrderDetails.checkNumber,
	day_of_business: if ( vars.deliveryOrderDetails.dayOfBusiness != "0001-01-01" ) vars.deliveryOrderDetails.dayOfBusiness else (now() >> "CST") as Date {
		format: "MM/dd/yyyy"
	},
	delivery_method: vars.deliveryOrderDetails.deliveryMethod,
	status: vars.deliveryOrderDetails.status,
	sub_total:vars.deliveryOrderDetails.subTotal,
	tax_total:vars.deliveryOrderDetails.taxTotal,
	agent_id: vars.deliveryOrderDetails.agentId
}]]]></db:input-parameters>
			</db:stored-procedure>
		</async>
	</sub-flow>

	<sub-flow name="send-create-email-notification"
		doc:id="eca0ef79-a105-453f-adc4-9cd4aca34bae">
		<db:stored-procedure
			doc:name="Send Email Notification"
			doc:id="74a24c25-844d-4cea-98e2-bbf6fdb34905"
			config-ref="Database_Config_Depot" target="sentEmail">
			<reconnect
				frequency="${secure::database.reconnect.frequency}"
				count="${secure::database.reconnect.count}" />
			<db:sql><![CDATA[{call prc_RemoteMail_CreateMessage(:id, :store, :type, :subject,:body, :param1, :param2)}]]></db:sql>
			<db:input-parameters><![CDATA[#[{
	id: 1,
	store: if (sizeOf(vars.storeId) < 4) (1 to (4 - sizeOf(vars.storeId))) map "#" joinBy "" ++ vars.storeId else vars.storeId,
	'type': null,
	subject: vars.tenderId.messageSubject,
	body: vars.emailMessage,
	param1: null,
	param2: null
}]]]></db:input-parameters>
		</db:stored-procedure>
	</sub-flow>
</mule>
